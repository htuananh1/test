// ==UserScript==
// @name         VSPhone - UI mobile menu trang, random từng mã/100 mã, auto reload, lưu local
// @namespace    http://tampermonkey.net/
// @version      5.0
// @description  UI mobile menu trang, random từng mã 1s (auto reload), hoặc 100 mã/lần, lưu local, xuất/xem/reset mã đã random
// @author       OpenAI
// @match        https://cloud.vsphone.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // ==== CONFIG ====
    const CONFIG = {
        CHARSET: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
        LENGTH: 9,
        PREFIX: 'CA',
        BATCH_SIZE: 100,
        DELAY_MS: 3000,
        DELAY_ONE: 1000
    };

    // ==== RANDOM CODE ====
    class CodeRandom {
        constructor(charset, length, prefix) {
            this.charset = charset;
            this.length = length;
            this.prefix = prefix;
            this.triedCodes = new Set();
        }
        async loadTriedCodes() {
            const saved = await GM_getValue('vsphone_tried_codes', []);
            saved.forEach(code => this.triedCodes.add(code));
        }
        async saveTriedCodes() {
            await GM_setValue('vsphone_tried_codes', Array.from(this.triedCodes));
        }
        randomCode() {
            let code = '';
            for (let i = 0; i < this.length; i++) {
                code += this.charset.charAt(Math.floor(Math.random() * this.charset.length));
            }
            return this.prefix + code;
        }
        randomBatch(size) {
            const batch = [];
            let tries = 0;
            while (batch.length < size && tries < size * 200) {
                const code = this.randomCode();
                if (!this.triedCodes.has(code)) {
                    batch.push(code);
                    this.triedCodes.add(code);
                }
                tries++;
            }
            return batch;
        }
        randomOne() {
            let tries = 0;
            while (tries < 10000) {
                const code = this.randomCode();
                if (!this.triedCodes.has(code)) {
                    this.triedCodes.add(code);
                    return code;
                }
                tries++;
            }
            return null;
        }
    }

    // ==== FILE SAVE ====
    function saveCodesToFile(codes) {
        const blob = new Blob([codes.join('\n')], {type: 'text/plain'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const now = new Date();
        const name = `vsphone_codes_${now.getFullYear()}${(now.getMonth()+1).toString().padStart(2,'0')}${now.getDate().toString().padStart(2,'0')}_${now.getHours().toString().padStart(2,'0')}${now.getMinutes().toString().padStart(2,'0')}${now.getSeconds().toString().padStart(2,'0')}.txt`;
        a.download = name;
        document.body.appendChild(a);
        a.click();
        setTimeout(() => {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }, 1000);
    }

    // ==== UI MOBILE MENU ====
    function createMobileMenu() {
        // Xóa menu cũ nếu có
        const old = document.getElementById('vsphone-menu');
        if (old) old.remove();

        const panel = document.createElement('div');
        panel.id = 'vsphone-menu';
        panel.innerHTML = `
            <style>
                #vsphone-menu {
                    position: fixed; left: 0; top: 0; width: 100vw; height: 100vh; background: #181c24;
                    color: #fff; z-index: 99999; font-family: 'Segoe UI',sans-serif; display: flex; flex-direction: column;
                }
                #vsphone-menu .vs-header {
                    padding: 18px 0 10px 0; text-align: center; font-size: 22px; font-weight: 700; color: #00b894;
                    background: #23272f; border-bottom: 1px solid #333;
                }
                #vsphone-menu .vs-tabs {
                    display: flex; border-bottom: 1px solid #333; background: #23272f;
                }
                #vsphone-menu .vs-tab {
                    flex: 1; text-align: center; padding: 12px 0; font-size: 17px; cursor: pointer;
                    color: #b2bec3; border-bottom: 2px solid transparent; transition: 0.2s;
                }
                #vsphone-menu .vs-tab.active {
                    color: #00b894; border-bottom: 2.5px solid #00b894; background: #181c24;
                }
                #vsphone-menu .vs-content {
                    flex: 1; overflow-y: auto; padding: 18px 18px 30px 18px; font-size: 16px;
                }
                #vsphone-menu .vs-btn {
                    width: 100%; background: linear-gradient(90deg,#00b894,#0984e3); color: #fff; border: none;
                    border-radius: 8px; padding: 15px 0; font-size: 18px; font-weight: 600; margin: 12px 0;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.08); cursor: pointer; transition: background 0.2s;
                }
                #vsphone-menu .vs-btn.stop { background: #d63031; }
                #vsphone-menu .vs-btn.reset { background: #636e72; }
                #vsphone-menu .vs-btn.export { background: #00b894; }
                #vsphone-menu .vs-btn.view { background: #0984e3; }
                #vsphone-menu .vs-status {
                    margin: 18px 0 0 0; font-size: 16px; min-height: 24px; color: #00b894; text-align: center;
                }
                #vsphone-menu .vs-select {
                    width: 100%; padding: 12px; font-size: 17px; border-radius: 8px; border: 1px solid #636e72;
                    background: #23272f; color: #fff; margin-bottom: 18px;
                }
                #vsphone-menu .vs-list {
                    background: #23272f; border-radius: 8px; padding: 12px; margin-top: 10px; max-height: 300px; overflow-y: auto;
                    font-size: 15px; color: #fff;
                }
                #vsphone-menu .vs-close {
                    position: absolute; right: 18px; top: 18px; font-size: 28px; color: #b2bec3; cursor: pointer;
                }
                @media (min-width: 600px) {
                    #vsphone-menu { width: 400px; left: auto; right: 30px; top: 30px; height: auto; border-radius: 18px; }
                }
            </style>
            <div class="vs-header">VSPhone Tool</div>
            <div class="vs-close" id="vs-close-btn">&times;</div>
            <div class="vs-tabs">
                <div class="vs-tab active" id="tab-random">Random</div>
                <div class="vs-tab" id="tab-view">Xem/Xuất</div>
                <div class="vs-tab" id="tab-reset">Reset</div>
            </div>
            <div class="vs-content" id="vs-content-random">
                <select class="vs-select" id="vsphone-mode">
                    <option value="batch">Random 100 mã/lần (delay 3s)</option>
                    <option value="onebyone">Từng mã 1s (auto reload lỗi)</option>
                </select>
                <button class="vs-btn" id="vsphone-start">Bắt đầu</button>
                <button class="vs-btn stop" id="vsphone-stop">Dừng</button>
                <div class="vs-status" id="vsphone-status"></div>
            </div>
            <div class="vs-content" id="vs-content-view" style="display:none;">
                <button class="vs-btn export" id="vsphone-export">Xuất file mã đã random</button>
                <button class="vs-btn view" id="vsphone-view">Xem 100 mã cuối</button>
                <div class="vs-list" id="vsphone-list" style="margin-top:10px;"></div>
            </div>
            <div class="vs-content" id="vs-content-reset" style="display:none;">
                <button class="vs-btn reset" id="vsphone-reset">Reset mã đã random</button>
            </div>
        `;
        document.body.appendChild(panel);

        // Tab switching
        document.getElementById('tab-random').onclick = function() {
            setTab('random');
        };
        document.getElementById('tab-view').onclick = function() {
            setTab('view');
            showList();
        };
        document.getElementById('tab-reset').onclick = function() {
            setTab('reset');
        };
        document.getElementById('vs-close-btn').onclick = function() {
            panel.style.display = 'none';
        };
    }

    function setTab(tab) {
        document.getElementById('tab-random').classList.remove('active');
        document.getElementById('tab-view').classList.remove('active');
        document.getElementById('tab-reset').classList.remove('active');
        document.getElementById('vs-content-random').style.display = 'none';
        document.getElementById('vs-content-view').style.display = 'none';
        document.getElementById('vs-content-reset').style.display = 'none';
        if (tab === 'random') {
            document.getElementById('tab-random').classList.add('active');
            document.getElementById('vs-content-random').style.display = '';
        } else if (tab === 'view') {
            document.getElementById('tab-view').classList.add('active');
            document.getElementById('vs-content-view').style.display = '';
        } else {
            document.getElementById('tab-reset').classList.add('active');
            document.getElementById('vs-content-reset').style.display = '';
        }
    }

    function logStatus(msg) {
        const el = document.getElementById('vsphone-status');
        if (el) el.innerText = msg;
    }

    async function showList() {
        const saved = await GM_getValue('vsphone_tried_codes', []);
        document.getElementById('vsphone-list').innerText = saved.length
            ? saved.slice(-100).join('\n')
            : 'Chưa có mã nào!';
    }

    // ==== AUTO CLICK MENU ====
    async function clickGiaHan() {
        for (let i = 0; i < 20; i++) {
            const divs = document.querySelectorAll('div.item');
            for (const div of divs) {
                if (div.textContent.trim().toLowerCase().includes('gia hạn hàng loạt')) {
                    div.click();
                    await new Promise(r => setTimeout(r, 500));
                    return true;
                }
            }
            await new Promise(r => setTimeout(r, 300));
        }
        return false;
    }

    // ==== MAIN RANDOM LOOP ====
    let stopFlag = false;
    let reloadFlag = false;

    async function startRandomLoop() {
        stopFlag = false;
        reloadFlag = false;
        const mode = document.getElementById('vsphone-mode').value;
        const codeRandom = new CodeRandom(CONFIG.CHARSET, CONFIG.LENGTH, CONFIG.PREFIX);
        logStatus('Đang tải mã đã random...');
        await codeRandom.loadTriedCodes();
        logStatus('Bắt đầu random...');

        if (mode === "batch") {
            let batchCount = 0;
            while (!stopFlag) {
                try {
                    const batch = codeRandom.randomBatch(CONFIG.BATCH_SIZE);
                    if (batch.length === 0) {
                        logStatus('Hết mã random!');
                        break;
                    }
                    const textarea = document.querySelector('.wrapper textarea');
                    const button = document.querySelector('.wrapper .el-button.submit');
                    if (!textarea || !button) {
                        logStatus('Không tìm thấy textarea hoặc nút submit!');
                        break;
                    }
                    textarea.value = batch.join('\n');
                    textarea.dispatchEvent(new Event('input', { bubbles: true }));
                    await new Promise(r => setTimeout(r, 500));
                    button.click();
                    batchCount++;
                    logStatus(`Đã submit batch ${batchCount} (100 mã), chờ 3s...`);
                    await codeRandom.saveTriedCodes();

                    for (let i = 0; i < 3; i++) {
                        if (stopFlag) break;
                        logStatus(`Đã submit batch ${batchCount}, đợi ${3-i}s...`);
                        await new Promise(r => setTimeout(r, 1000));
                    }
                } catch (err) {
                    logStatus('Lỗi: ' + err);
                    console.error(err);
                    break;
                }
            }
            logStatus('Đã dừng!');
        } else if (mode === "onebyone") {
            if (location.pathname === '/' || location.pathname === '/index') {
                logStatus('Đang tự động vào Gia hạn hàng loạt...');
                await new Promise(r => setTimeout(r, 1500));
                await clickGiaHan();
                await new Promise(r => setTimeout(r, 800));
            }
            let count = 0;
            while (!stopFlag) {
                try {
                    const code = codeRandom.randomOne();
                    if (!code) {
                        logStatus('Hết mã random!');
                        break;
                    }
                    const textarea = document.querySelector('.wrapper textarea');
                    const button = document.querySelector('.wrapper .el-button.submit');
                    if (!textarea || !button) {
                        logStatus('Không tìm thấy textarea hoặc nút submit!');
                        break;
                    }
                    textarea.value = code;
                    textarea.dispatchEvent(new Event('input', { bubbles: true }));
                    await new Promise(r => setTimeout(r, 300));
                    button.click();
                    count++;
                    logStatus(`Đã submit mã thứ ${count}, chờ 1s...`);
                    await codeRandom.saveTriedCodes();

                    await new Promise(r => setTimeout(r, 1000));
                    if (document.querySelector('.err-tip') && document.querySelector('.err-tip').textContent.includes('không thể kích hoạt')) {
                        logStatus('Phát hiện lỗi mã không thể kích hoạt, sẽ reload...');
                        reloadFlag = true;
                        setTimeout(() => location.reload(), 800);
                        break;
                    }
                } catch (err) {
                    logStatus('Lỗi: ' + err);
                    console.error(err);
                    break;
                }
            }
            if (!reloadFlag) logStatus('Đã dừng!');
        }
    }

    function stopRandomLoop() {
        stopFlag = true;
    }

    async function resetTriedCodes() {
        if (confirm('Bạn có chắc muốn xóa toàn bộ mã đã random?')) {
            await GM_deleteValue('vsphone_tried_codes');
            logStatus('Đã xóa toàn bộ mã đã random!');
            showList();
        }
    }

    async function exportTriedCodes() {
        const saved = await GM_getValue('vsphone_tried_codes', []);
        if (saved.length === 0) {
            alert('Chưa có mã nào để xuất!');
            return;
        }
        saveCodesToFile(saved);
    }

    async function viewTriedCodes() {
        const saved = await GM_getValue('vsphone_tried_codes', []);
        if (saved.length === 0) {
            alert('Chưa có mã nào!');
            return;
        }
        alert('Đã random tổng cộng: ' + saved.length + ' mã\n\n' + saved.slice(-100).join('\n'));
    }

    // ==== AUTO VÀO GIA HẠN HÀNG LOẠT SAU KHI RELOAD ====
    function autoAfterReload() {
        if (sessionStorage.getItem('vsphone_auto_giahan') === '1') {
            sessionStorage.removeItem('vsphone_auto_giahan');
            setTimeout(async () => {
                await clickGiaHan();
                setTimeout(() => {
                    startRandomLoop();
                }, 800);
            }, 1200);
        }
    }

    // ==== KHỞI ĐỘNG MENU & AUTO ====
    (function waitForReady() {
        if (document.querySelector('.wrapper textarea') && document.querySelector('.wrapper .el-button.submit')) {
            createMobileMenu();
            document.getElementById('vsphone-start').onclick = function() {
                sessionStorage.setItem('vsphone_auto_giahan', '1');
                startRandomLoop();
            };
            document.getElementById('vsphone-stop').onclick = stopRandomLoop;
            document.getElementById('vsphone-reset').onclick = resetTriedCodes;
            document.getElementById('vsphone-export').onclick = exportTriedCodes;
            document.getElementById('vsphone-view').onclick = viewTriedCodes;
            autoAfterReload();
        } else {
            setTimeout(waitForReady, 1000);
        }
    })();

})();
