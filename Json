// ==UserScript==
// @name         UGPHONE VIP TOOL 
// @namespace    https://ugphone.com/
// @version      2.4
// @author       Hoàng Anh
// @match        https://www.ugphone.com/toc-portal/#/login
// @match        https://www.ugphone.com/toc-portal/#/dashboard/index
// @icon         https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExcGhmdmJyN3cxdWNjNDc1aG5iN3J4eTBrMWV6Z3lscTh0MHFnemV0diZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/jPdNzfqIDmokLbSqO0/giphy.gif
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    const config = {
        bubbleIcon: 'https://cdn-icons-png.flaticon.com/512/1995/1995485.png',
        autoBtnText: 'AUTO MUA MÁY TRIAL 4H',
        themeColor: '#4a6bdf',
        secondaryColor: '#f0f2f5'
    };

    const orderedKeys = [
        "ugPhoneLang",
        "ugBrowserId",
        "UGPHONE-ID",
        "UGrightSlideTips",
        "hadAgreePolicy",
        "_gcl_ls",
        "UGPHONE-Token",
        "UGPHONE-MQTT"
    ];

    const host = document.createElement('div');
    host.id = 'ugphone-vip-tool';
    document.body.appendChild(host);

    const shadow = host.attachShadow({ mode: 'open' });

    shadow.innerHTML = `
        <style>
            :host {
                all: initial;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
            #bubble { position: fixed; top: 20px; right: 20px; width: 50px; height: 50px; border-radius: 50%;
                background: ${config.themeColor}; background-image: url('${config.bubbleIcon}');
                background-size: 60%; background-repeat: no-repeat; background-position: center; cursor: pointer;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 9999; transition: all 0.3s ease; border: 2px solid white; }
            #bubble:hover { transform: scale(1.1); box-shadow: 0 6px 16px rgba(0,0,0,0.2); }
            #overlay { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5);
                display: none; justify-content: center; align-items: center; z-index: 9998; }
            #modal { width: 380px; background: transparent; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.2);
                overflow: hidden; animation: fadeIn 0.3s ease; position:relative; }
            @keyframes fadeIn { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }
            #modal-header { background: rgba(74,107,223,0.92); color: white; padding: 16px; font-size: 18px; font-weight: bold;
                display: flex; justify-content: space-between; align-items: center; z-index:2; position:relative; border-radius: 16px 16px 0 0;}
            #modal-content {
                padding: 20px;
                position:relative;
                z-index:2;
                background: rgba(255,255,255,0.03); /* Gần như hoàn toàn trong suốt */
                box-shadow: 0 4px 30px rgba(0, 0, 0, 0.08);
                border-radius: 0 0 16px 16px;
            }
            #message { min-height: 20px; color: #e74c3c; font-size: 14px; margin-bottom: 12px; text-align: center; }
            textarea { width: 100%; height: 120px; padding: 10px; border: 1px solid #ddd; border-radius: 6px; resize: none;
                font-family: monospace; margin-bottom: 12px; background:rgba(255,255,255,0.14);}
            .button-group { display: flex; gap: 8px; margin-bottom: 12px; }
            button {
                flex: 1;
                padding: 10px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: 500;
                transition: all 0.2s;
                opacity: 0.93;
                background: rgba(74,107,223,0.13);
                color: #fff;
            }
            button:hover {
                opacity: 1;
                background: #4a6bdf;
                color: #fff;
                box-shadow: 0 2px 8px rgba(74,107,223,0.2);
                transform: translateY(-2px) scale(1.04);
            }
            #submit { background: rgba(74,107,223,0.13); }
            #logout { background: rgba(231,76,60,0.13); }
            #copy { background: rgba(46,204,113,0.13); }
            #cancel { background: rgba(149,165,166,0.13); }
            #auto-trial { width: 100%; background: rgba(243,156,18,0.18); color: white; font-weight: bold; margin-top: 8px; }
            #modal-footer {
                text-align: center;
                padding: 12px;
                font-size: 12px;
                color: #fff;
                border-top: 1px solid rgba(240,242,245,0.18);
                position:relative;
                z-index:2;
                background: rgba(74,107,223,0.08);
                border-radius: 0 0 16px 16px;
            }
            .file-input-wrapper { position: relative; overflow: hidden; flex: 1; }
            .file-input-wrapper input { position: absolute; left: 0; top: 0; opacity: 0; width: 100%; height: 100%; cursor: pointer; }
            .spinner { border: 2px solid rgba(255,255,255,0.3); border-radius: 50%; border-top: 2px solid white; width: 14px; height: 14px;
                animation: spin 1s linear infinite; display: inline-block; vertical-align: middle; margin-right: 8px; }
            #modal video.bg-video {
                position: absolute;
                top: 0; left: 0;
                width: 100%;
                height: 100%;
                z-index: 1;
                object-fit: cover;
                opacity: 1;
                border-radius: 16px;
                pointer-events:none;
            }
        </style>
        <div id="bubble" title="UGPHONE VIP TOOL"></div>
        <div id="overlay">
            <div id="modal">
                <!-- NỀN VIDEO SẼ ĐƯỢC CHÈN Ở ĐÂY -->
                <div id="modal-header">
                    <span>UGPHONE VIP TOOL</span>
                    <span id="close-modal" style="cursor:pointer">×</span>
                </div>
                <div id="modal-content">
                    <div id="message"></div>
                    <textarea id="input" placeholder='Nhập nội dung JSON tại đây...'></textarea>
                    <div class="button-group">
                        <button id="submit">Đăng nhập</button>
                        <button id="logout">Đăng xuất</button>
                    </div>
                    <div class="button-group">
                        <button id="copy">Sao chép</button>
                        <div class="file-input-wrapper">
                            <button id="upload">Tải lên</button>
                            <input type="file" id="file-input" accept=".json,application/json">
                        </div>
                    </div>
                    <button id="auto-trial">${config.autoBtnText}</button>
                </div>
                <div id="modal-footer">
                    Phát triển bởi Hoàng Anh<br>
                    <small>Phiên bản 2.4</small>
                </div>
            </div>
        </div>
    `;

    // Chèn video nền vào modal
    const modal = shadow.getElementById('modal');
    if (modal) {
        const video = document.createElement('video');
        Object.assign(video, {
            src: 'https://v1.pinimg.com/videos/iht/expMp4/c0/d9/bb/c0d9bbb4a6b0a3995b2d92da5b5e21a7_720w.mp4',
            autoplay: true,
            loop: true,
            muted: true,
            playsInline: true
        });
        video.className = "bg-video";
        modal.prepend(video);
    }

    // Khởi tạo sự kiện
    const bubble      = shadow.getElementById('bubble');
    const overlay     = shadow.getElementById('overlay');
    const closeModal  = shadow.getElementById('close-modal');
    const messageEl   = shadow.getElementById('message');
    const btnSubmit   = shadow.getElementById('submit');
    const btnLogout   = shadow.getElementById('logout');
    const btnCopy     = shadow.getElementById('copy');
    const btnUpload   = shadow.getElementById('upload');
    const fileInput   = shadow.getElementById('file-input');
    const btnAuto     = shadow.getElementById('auto-trial');
    const txtArea     = shadow.getElementById('input');

    function showMessage(msg, isError = true) {
        messageEl.style.color = isError ? '#e74c3c' : '#2ecc71';
        messageEl.textContent = msg;
        setTimeout(() => { if (messageEl.textContent === msg) messageEl.textContent = ''; }, 4000);
    }

    bubble.addEventListener('click', () => { overlay.style.display = 'flex'; });
    closeModal.addEventListener('click', () => { overlay.style.display = 'none'; });

    btnSubmit.addEventListener('click', () => {
        const text = txtArea.value.trim();
        if (!text) { showMessage('Vui lòng nhập JSON!'); return; }
        let obj;
        try { obj = JSON.parse(text); }
        catch (e) { showMessage('JSON không hợp lệ!'); return; }
        Object.entries(obj).forEach(([k, v]) => localStorage.setItem(k, typeof v === 'object' ? JSON.stringify(v) : String(v)));
        showMessage('Đã import localStorage', false);
        setTimeout(() => { overlay.style.display = 'none'; location.reload(); }, 500);
    });

    btnLogout.addEventListener('click', () => {
        localStorage.clear();
        showMessage('Đã logout', false);
        setTimeout(() => { overlay.style.display = 'none'; location.reload(); }, 500);
    });

    btnCopy.addEventListener('click', () => {
        const data = {};
        for (const k of orderedKeys) {
            const v = localStorage.getItem(k);
            if (v !== null) data[k] = v;
        }
        const json = JSON.stringify(data, null, 2);
        (navigator.clipboard?.writeText
            ? navigator.clipboard.writeText(json)
            : new Promise((res, rej) => {
                const ta = document.createElement('textarea');
                ta.value = json; document.body.appendChild(ta); ta.select();
                try { document.execCommand('copy'); res(); } catch (e) { rej(e); }
                document.body.removeChild(ta);
            })
        ).then(() => showMessage('Đã copy localStorage', false))
         .catch(() => showMessage('Copy thất bại', true));
    });

    btnUpload.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = function(evt) { txtArea.value = evt.target.result; };
        reader.readAsText(file);
    });

    function xhrRequest(method, url, data, headers) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open(method, url, true);
            xhr.withCredentials = true;
            for (const key in headers) xhr.setRequestHeader(key, headers[key]);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        try { resolve(JSON.parse(xhr.responseText)); }
                        catch (e) { reject(e); }
                    } else reject(new Error('Status ' + xhr.status));
                }
            };
            xhr.send(data ? JSON.stringify(data) : null);
        });
    }

    const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

    btnAuto.addEventListener('click', async () => {
        if (btnAuto.disabled) return;
        btnAuto.disabled = true;
        btnAuto.innerHTML = '<span class="spinner"></span>' + config.autoBtnText;
        try {
            let domain = window.location.hostname;
            if (!(domain === 'www.ugphone.com' || domain === 'ugphone.com')) {
                showMessage('Vui lòng vào trang ugphone.com', true);
                btnAuto.disabled = false; btnAuto.textContent = config.autoBtnText;
                return;
            }
            const mqtt = JSON.parse(localStorage.getItem('UGPHONE-MQTT') || '{}');
            const headers = {
                'accept': 'application/json, text/plain, */*',
                'accept-language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
                'content-type': 'application/json;charset=UTF-8',
                'lang': 'vi',
                'terminal': 'web',
                'access-token': mqtt.access_token,
                'login-id': mqtt.login_id
            };
            await xhrRequest('POST', 'https://www.ugphone.com/api/apiv1/fee/newPackage', {}, headers);
            const json1 = await xhrRequest('GET', 'https://www.ugphone.com/api/apiv1/info/configList2', null, headers);
            let list1 = Array.isArray(json1.data?.list) ? json1.data.list : json1.data;
            if (!Array.isArray(list1)) {
                const arr = Object.values(json1.data || {}).find(v => Array.isArray(v));
                list1 = Array.isArray(arr) ? arr : [];
            }
            if (!list1.length || !Array.isArray(list1[0].android_version) || !list1[0].android_version.length)
                throw new Error('Không lấy được config_id');
            const config_id = list1[0].android_version[0].config_id;
            const json2 = await xhrRequest('POST', 'https://www.ugphone.com/api/apiv1/info/mealList', { config_id }, headers);
            let subscriptions = [];
            let subData = json2.data?.list;
            if (Array.isArray(subData)) subscriptions = subData.flatMap(i => i.subscription || []);
            else if (subData?.subscription) subscriptions = subData.subscription;
            if (!subscriptions.length) throw new Error('Không lấy được subscription');
            let success = false;
            while (!success) {
                for (const net_id of subscriptions.map(o => o.network_id)) {
                    const priceJson = await xhrRequest('POST', 'https://www.ugphone.com/api/apiv1/fee/queryResourcePrice', {
                        order_type: 'newpay', period_time: '4', unit: 'hour', resource_type: 'cloudphone',
                        resource_param: { pay_mode: 'subscription', config_id, network_id: net_id, count: 1, use_points: 3, points: 250 }
                    }, headers);
                    const amount_id = priceJson.data?.amount_id;
                    if (!amount_id) continue;
                    await sleep(10000);
                    const payJson = await xhrRequest('POST', 'https://www.ugphone.com/api/apiv1/fee/payment', { amount_id, pay_channel: 'free' }, headers);
                    if (payJson.code === 200) {
                        showMessage('Đã mua thành công', false);
                        success = true;
                        location.reload();
                        break;
                    }
                }
            }
        } catch (e) {
            console.error(e);
            showMessage('Lỗi: ' + e.message, true);
        } finally {
            btnAuto.disabled = false;
            btnAuto.textContent = config.autoBtnText;
        }
    });
})();
