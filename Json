// ==UserScript==
// @name         VSPhone - UI gọn nhẹ (Blob Menu), Quản lý Dữ liệu
// @namespace    http://tampermonkey.net/
// @version      8.1
// @description  Giao diện đẹp hơn, có hiệu ứng khi chạy (pulsing blob, progress bar), delay 1.5s.
// @author       OpenAI & Gemini
// @match        https://cloud.vsphone.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';
    console.log('[VSPhone Tool v8.1] Script loading...');

    // ==== CONFIG ====
    const CONFIG = {
        CHARSET: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
        LENGTH: 9,
        PREFIX: 'CA',
        BATCH_SIZE: 5000,
        DELAY_MS: 1500 // << ĐÃ SỬA: Thời gian delay 1,5 giây
    };

    // =========================================================================
    // ==== UI & NAVIGATION ====
    // =========================================================================

    function injectGlobalStyles() {
        document.getElementById('vsphone-styles')?.remove();
        const style = document.createElement('style');
        style.id = 'vsphone-styles';
        style.textContent = `
            /* General */
            #vsphone-blob-container { position: fixed; bottom: 20px; right: 20px; z-index: 99998; }
            #vsphone-blob { width: 55px; height: 55px; background: linear-gradient(135deg, #00b894, #0984e3); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 28px; cursor: pointer; box-shadow: 0 4px 15px rgba(0,0,0,0.2); transition: transform 0.2s ease; user-select: none; }
            #vsphone-blob:hover { transform: scale(1.1); }
            #vsphone-menu-panel { position: fixed; inset: 0; background: rgba(0,0,0,0.5); z-index: 99999; display: none; align-items: center; justify-content: center; }
            #vsphone-menu { background: #1c2128; color: #fff; font-family: 'Segoe UI', sans-serif; width: 90vw; max-width: 420px; border-radius: 18px; display: flex; flex-direction: column; box-shadow: 0 5px 20px rgba(0,0,0,0.3); animation: vs-fadein 0.3s; }
            @keyframes vs-fadein { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }

            /* Running Effect */
            #vsphone-blob.is-running { animation: vs-pulse 1.5s infinite; }
            @keyframes vs-pulse { 0% { box-shadow: 0 0 0 0 rgba(0, 184, 148, 0.7); } 70% { box-shadow: 0 0 0 15px rgba(0, 184, 148, 0); } 100% { box-shadow: 0 0 0 0 rgba(0, 184, 148, 0); } }

            /* Header & Tabs */
            #vsphone-menu .vs-header { padding: 15px; text-align: center; font-size: 20px; font-weight: 700; color: #00b894; background: #2d333b; border-radius: 18px 18px 0 0; position: relative; }
            #vsphone-menu .vs-close { position: absolute; right: 15px; top: 50%; transform: translateY(-50%); font-size: 28px; color: #b2bec3; cursor: pointer; line-height: 1; }
            .vs-tabs { display: flex; background: #2d333b; border-bottom: 1px solid #444c56; }
            .vs-tab { flex: 1; text-align: center; padding: 12px 0; font-size: 16px; cursor: pointer; color: #b2bec3; border-bottom: 3px solid transparent; transition: all 0.2s; }
            .vs-tab:hover { background: #444c56; }
            .vs-tab.active { color: #00b894; border-bottom-color: #00b894; font-weight: 600; }

            /* Content & Buttons */
            .vs-content { padding: 20px; }
            .action-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; }
            .vs-btn { width: 100%; background: linear-gradient(90deg,#00b894,#0984e3); color: #fff; border: none; border-radius: 8px; padding: 13px 0; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.2s; }
            .vs-btn:hover { opacity: 0.9; transform: translateY(-2px); }
            .vs-btn.stop { background: #d63031; }
            .vs-btn.secondary { background: #636e72; }
            .vs-btn.danger-outline { margin-top: 15px; background: transparent; border: 1px solid #d63031; color: #d63031; }
            .vs-btn.danger-outline:hover { background: #d63031; color: white; }

            /* Status & Progress Bar */
            .vs-status-area { margin-top: 15px; font-size: 15px; min-height: 40px; text-align: center; }
            .vs-status-text { color: #00b894; margin-bottom: 8px; }
            .progress-bar-container { height: 6px; background: #2d333b; border-radius: 3px; overflow: hidden; }
            #vs-progress-bar { height: 100%; width: 0%; background: #00b894; border-radius: 3px; transition: width 0.1s linear; }

            /* Data Management Tab */
            #vs-all-codes-list { width: 100%; height: 150px; background: #2d333b; color: #fff; border: 1px solid #444c56; border-radius: 8px; padding: 10px; font-size: 14px; resize: vertical; margin-top: 5px; }
        `;
        document.head.appendChild(style);
    }

    function createMenuAndBlob() {
        document.getElementById('vsphone-blob-container')?.remove();
        document.getElementById('vsphone-menu-panel')?.remove();
        
        const blobContainer = document.createElement('div');
        blobContainer.id = 'vsphone-blob-container';
        blobContainer.innerHTML = `<div id="vsphone-blob" title="Mở VSPhone Tool">⚙️</div>`;

        const panel = document.createElement('div');
        panel.id = 'vsphone-menu-panel';
        panel.innerHTML = `
            <div id="vsphone-menu">
                <div class="vs-header">
                    <span>VSPhone Tool</span>
                    <div class="vs-close" id="vs-close-btn">&times;</div>
                </div>
                <div class="vs-tabs">
                    <div class="vs-tab active" data-tab="random">Random</div>
                    <div class="vs-tab" data-tab="data">Quản lý Dữ liệu</div>
                </div>

                <div class="vs-content" id="vs-content-random">
                    <div class="action-grid">
                        <button class="vs-btn" id="vsphone-start">Bắt đầu</button>
                        <button class="vs-btn stop" id="vsphone-stop">Dừng</button>
                    </div>
                    <div class="vs-status-area">
                        <div class="vs-status-text" id="vsphone-status">Đã random: <span id="vs-total-codes">0</span> mã</div>
                        <div class="progress-bar-container">
                            <div id="vs-progress-bar"></div>
                        </div>
                    </div>
                </div>

                <div class="vs-content" id="vs-content-data" style="display:none;">
                    <strong>Toàn bộ mã đã thử:</strong>
                    <textarea id="vs-all-codes-list" readonly placeholder="Chưa có mã nào..."></textarea>
                    <div class="action-grid" style="margin-top: 15px;">
                        <button class="vs-btn secondary" id="vs-copy-codes">Chép tất cả</button>
                        <button class="vs-btn secondary" id="vs-export-codes">Xuất ra File</button>
                    </div>
                    <button class="vs-btn danger-outline" id="vs-reset-codes">Xóa toàn bộ Lịch sử</button>
                </div>
            </div>
        `;
        document.body.appendChild(blobContainer);
        document.body.appendChild(panel);
    }

    // ... Other functions (CodeRandom, makeDraggable, etc.) remain the same
    class CodeRandom { constructor(charset, length, prefix) { this.charset = charset; this.length = length; this.prefix = prefix; this.triedCodes = new Set(); } async loadTriedCodes() { const saved = await GM_getValue('vsphone_tried_codes', []); this.triedCodes = new Set(saved); } async saveTriedCodes() { await GM_setValue('vsphone_tried_codes', Array.from(this.triedCodes)); } randomCode() { let code = ''; for (let i = 0; i < this.length; i++) { code += this.charset.charAt(Math.floor(Math.random() * this.charset.length)); } return this.prefix + code; } randomBatch(size) { const batch = []; let tries = 0; const maxTries = size * 200; while (batch.length < size && tries < maxTries) { const code = this.randomCode(); if (!this.triedCodes.has(code)) { batch.push(code); this.triedCodes.add(code); } tries++; } return batch; } }
    const codeRandom = new CodeRandom(CONFIG.CHARSET, CONFIG.LENGTH, CONFIG.PREFIX);
    let stopFlag = false;
    function makeDraggable(element) { let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; const dragTarget = element.querySelector('#vsphone-blob') || element; dragTarget.onmousedown = function(e) { e.preventDefault(); pos3 = e.clientX; pos4 = e.clientY; document.onmouseup = closeDragElement; document.onmousemove = elementDrag; }; function elementDrag(e) { e.preventDefault(); pos1 = pos3 - e.clientX; pos2 = pos4 - e.clientY; pos3 = e.clientX; pos4 = e.clientY; element.style.top = (element.offsetTop - pos2) + "px"; element.style.left = (element.offsetLeft - pos1) + "px"; } function closeDragElement() { document.onmouseup = null; document.onmousemove = null; } }

    // =========================================================================
    // ==== CORE & NEW FUNCTIONS ====
    // =========================================================================
    
    async function startRandomLoop() {
        if (!document.querySelector('.wrapper textarea')) {
            logStatus('Trang không hợp lệ. Cần ở trang có ô nhập mã.');
            return;
        }

        stopFlag = false;
        const blob = document.getElementById('vsphone-blob');
        const progressBar = document.getElementById('vs-progress-bar');
        blob?.classList.add('is-running');

        try {
            let batchCount = 0;
            while (!stopFlag) {
                batchCount++;
                logStatus(`Đang tạo batch #${batchCount}...`);
                const batch = codeRandom.randomBatch(CONFIG.BATCH_SIZE);

                if (batch.length === 0) {
                    logStatus('Hết mã random hoặc không thể tạo thêm!');
                    break;
                }

                const textarea = document.querySelector('.wrapper textarea');
                const button = document.querySelector('.wrapper .el-button.submit');
                if (!textarea || !button) {
                    logStatus('Lỗi: Không tìm thấy UI trang!');
                    break;
                }

                textarea.value = batch.join('\n');
                textarea.dispatchEvent(new Event('input', { bubbles: true }));
                await new Promise(r => setTimeout(r, 200));
                button.click();
                logStatus(`Đã submit batch #${batchCount}...`);
                await codeRandom.saveTriedCodes();
                await updateTotalCodesDisplay();
                
                // Delay loop with progress bar
                const delaySteps = CONFIG.DELAY_MS / 100; // 15 steps for 1500ms
                for (let i = 0; i <= delaySteps; i++) {
                    if (stopFlag) break;
                    const percent = Math.round((i / delaySteps) * 100);
                    if (progressBar) progressBar.style.width = percent + '%';
                    logStatus(`Đợi ${((delaySteps - i) * 0.1).toFixed(1)}s...`);
                    await new Promise(r => setTimeout(r, 100));
                }
                if (progressBar) progressBar.style.width = '0%'; // Reset for next run
            }
        } catch (err) {
            logStatus('Lỗi: ' + err.message);
            console.error(err);
        } finally {
            // Cleanup on exit
            if (!stopFlag) logStatus('Hoàn thành!');
            else logStatus('Đã dừng!');
            blob?.classList.remove('is-running');
            if (progressBar) progressBar.style.width = '0%';
        }
    }

    function stopRandomLoop() {
        stopFlag = true;
    }
    
    // Other functions (setTab, data management, etc.)
    function setTab(tabName) { document.querySelectorAll('.vs-tab').forEach(tab => tab.classList.remove('active')); document.querySelectorAll('.vs-content').forEach(content => content.style.display = 'none'); const activeTab = document.querySelector(`.vs-tab[data-tab="${tabName}"]`); const activeContent = document.getElementById(`vs-content-${tabName}`); if(activeTab) activeTab.classList.add('active'); if(activeContent) activeContent.style.display = 'block'; if (tabName === 'data') { displayAllCodes(); } }
    async function displayAllCodes() { const textarea = document.getElementById('vs-all-codes-list'); if (!textarea) return; const codes = await GM_getValue('vsphone_tried_codes', []); textarea.value = codes.join('\n'); textarea.scrollTop = textarea.scrollHeight; }
    async function copyAllCodes() { const textarea = document.getElementById('vs-all-codes-list'); const button = document.getElementById('vs-copy-codes'); if (!textarea || !button) return; try { await navigator.clipboard.writeText(textarea.value); const originalText = button.textContent; button.textContent = 'Đã chép!'; setTimeout(() => { button.textContent = originalText; }, 2000); } catch (err) { console.error('Failed to copy codes: ', err); alert('Lỗi khi sao chép.'); } }
    async function exportAllCodes() { const codes = await GM_getValue('vsphone_tried_codes', []); if (codes.length === 0) { alert('Chưa có mã nào để xuất!'); return; } const blob = new Blob([codes.join('\n')], {type: 'text/plain'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; const now = new Date(); a.download = `vsphone_codes_${now.getFullYear()}${(now.getMonth()+1).toString().padStart(2,'0')}${now.getDate().toString().padStart(2,'0')}.txt`; document.body.appendChild(a); a.click(); setTimeout(() => { document.body.removeChild(a); URL.revokeObjectURL(url); }, 100); }
    async function resetAllCodes() { if (confirm('CẢNH BÁO:\nBạn có chắc muốn XÓA VĨNH VIỄN toàn bộ lịch sử mã đã random?\nThao tác này không thể hoàn tác.')) { await GM_deleteValue('vsphone_tried_codes'); await codeRandom.loadTriedCodes(); await updateTotalCodesDisplay(); await displayAllCodes(); logStatus('Đã xóa toàn bộ lịch sử mã!'); } }
    function toggleMenu(show) { const panel = document.getElementById('vsphone-menu-panel'); const blob = document.getElementById('vsphone-blob-container'); if (panel && blob) { if (show) { panel.style.display = 'flex'; blob.style.display = 'none'; updateTotalCodesDisplay(); } else { panel.style.display = 'none'; blob.style.display = 'block'; } } }
    function logStatus(msg) { const el = document.getElementById('vsphone-status'); if (el) el.innerText = msg; }
    async function updateTotalCodesDisplay() { const count = codeRandom.triedCodes.size; const totalEl = document.getElementById('vs-total-codes'); if (totalEl) { totalEl.innerText = count.toLocaleString('vi-VN'); } const statusEl = document.getElementById('vsphone-status'); if (statusEl && !stopFlag && !document.querySelector('#vsphone-blob.is-running')) { statusEl.innerHTML = `Đã random: <span id="vs-total-codes">${count.toLocaleString('vi-VN')}</span> mã`; } }

    // =========================================================================
    // ==== ENTRY POINT ====
    // =========================================================================
    async function initialize() {
        console.log('[VSPhone Tool] Initializing...');
        injectGlobalStyles();
        createMenuAndBlob();
        await codeRandom.loadTriedCodes();
        await updateTotalCodesDisplay();

        // Attach event listeners
        makeDraggable(document.getElementById('vsphone-blob-container'));
        document.getElementById('vsphone-blob').onclick = () => toggleMenu(true);
        document.getElementById('vs-close-btn').onclick = () => toggleMenu(false);
        document.querySelectorAll('.vs-tab').forEach(tab => tab.addEventListener('click', () => setTab(tab.dataset.tab)));
        document.getElementById('vsphone-start').onclick = startRandomLoop;
        document.getElementById('vsphone-stop').onclick = stopRandomLoop;
        document.getElementById('vs-copy-codes').onclick = copyAllCodes;
        document.getElementById('vs-export-codes').onclick = exportAllCodes;
        document.getElementById('vs-reset-codes').onclick = resetAllCodes;

        console.log('[VSPhone Tool] Initialization complete. Ready to use.');
    }

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        initialize();
    } else {
        window.addEventListener('DOMContentLoaded', initialize, { once: true });
    }

})();
